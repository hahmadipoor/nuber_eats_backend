import { Restaurant } from "./entities/restaurant.entity";
import { Repository } from "typeorm";
import { CreateRestaurantInput, CreateRestaurantOutput } from './dtos/create-restaurant.dto';
import { UpdateRestaurantDto } from './dtos/update-restaurant.dto';
import { Userr } from "src/users/entities/user.entity";
import { Category } from "./entities/cetegory.entity";
import { EditRestaurantInput, EditRestaurantOutput } from "./dtos/edit-restaurant.dto";
import { DeleteRestaurantInput, DeleteRestaurantOutput } from "./dtos/delete-restaurant.dto";
import { CategoryRepository } from "./repositories/category.repository";
import { AllCategoriesOutput } from "./dtos/all-categories.dto";
import { CategoryInput, CategoryOutput } from "./dtos/category.dto";
import { RestaurantsInput, RestaurantsOutput } from "./restaurants.dto";
import { RestaurantInput, RestaurantOutput } from "./dtos/restaurant.dto";
import { SearchRestaurantInput, SearchRestaurantOutput } from "./dtos/search-restaurant.dto";
import { DeleteDishInput, DeleteDishOutput } from "./dtos/delete-dish.dto";
import { EditDishInput, EditDishOutput } from "./dtos/edit-dish.dto";
import { CreateDishInput, CreateDishOutput } from "./dtos/create-dish.dto";
import { Dish } from "./entities/dish.entity";
export declare class RestaurantService {
    private readonly restaurants;
    private readonly categories;
    private readonly dishes;
    constructor(restaurants: Repository<Restaurant>, categories: CategoryRepository, dishes: Repository<Dish>);
    getAll(): Promise<Restaurant[]>;
    createRestaurant(owner: Userr, createRestaurantInput: CreateRestaurantInput): Promise<CreateRestaurantOutput>;
    updateRestaurant(updateRestaurantDto: UpdateRestaurantDto): Promise<boolean>;
    editRestaurant(owner: Userr, editRestaurantInput: EditRestaurantInput): Promise<EditRestaurantOutput>;
    deleteRestaurant(owner: Userr, { restaurantId }: DeleteRestaurantInput): Promise<DeleteRestaurantOutput>;
    allCategories(): Promise<AllCategoriesOutput>;
    countRestaurants(category: Category): Promise<number>;
    findCategoryBySlug({ slug, page }: CategoryInput): Promise<CategoryOutput>;
    allRestaurants({ page }: RestaurantsInput): Promise<RestaurantsOutput>;
    findRestaurantById({ restaurantId }: RestaurantInput): Promise<RestaurantOutput>;
    searchRestaurantByName({ query, page }: SearchRestaurantInput): Promise<SearchRestaurantOutput>;
    createDish(owner: Userr, createDishInput: CreateDishInput): Promise<CreateDishOutput>;
    checkDishOwner(ownerId: number, dishId: number): Promise<void>;
    editDish(owner: Userr, editDishInput: EditDishInput): Promise<EditDishOutput>;
    deleteDish(owner: Userr, { dishId }: DeleteDishInput): Promise<DeleteDishOutput>;
}
